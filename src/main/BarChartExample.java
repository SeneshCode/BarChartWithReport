package main;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.raven.chart.ModelChart;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.LookAndFeel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

public class BarChartExample extends javax.swing.JFrame {

    ArrayList<BarChartDatas> dataList = new ArrayList<>();

    public BarChartExample() {
        initComponents();
        LookAndFeel lookAndFeel = UIManager.getLookAndFeel();
        if (lookAndFeel.getClass().getSimpleName().equals("FlatDarkLaf")) {
            FlatLightLaf.setup();
        } else {
            FlatDarkLaf.setup();
        }
        SwingUtilities.updateComponentTreeUI(this);
        addData();
        initChart();
    }

    private void addData() {

        // January : Income , Expense , Profit , Cost
        dataList.add(new BarChartDatas("Jan", "Income", 500));
        dataList.add(new BarChartDatas("Jan", "Expense", 200));
        dataList.add(new BarChartDatas("Jan", "Profit", 80));
        dataList.add(new BarChartDatas("Jan", "Cost", 89));

        // February : Income , Expense , Profit , Cost
        dataList.add(new BarChartDatas("Feb", "Income", 600));
        dataList.add(new BarChartDatas("Feb", "Expense", 750));
        dataList.add(new BarChartDatas("Feb", "Profit", 90));
        dataList.add(new BarChartDatas("Feb", "Cost", 150));

        // March : Income , Expense , Profit , Cost
        dataList.add(new BarChartDatas("Mar", "Income", 200));
        dataList.add(new BarChartDatas("Mar", "Expense", 350));
        dataList.add(new BarChartDatas("Mar", "Profit", 460));
        dataList.add(new BarChartDatas("Mar", "Cost", 900));

        // April : Income , Expense , Profit , Cost
        dataList.add(new BarChartDatas("Apr", "Income", 480));
        dataList.add(new BarChartDatas("Apr", "Expense", 150));
        dataList.add(new BarChartDatas("Apr", "Profit", 750));
        dataList.add(new BarChartDatas("Apr", "Cost", 700));

        // May : Income , Expense , Profit , Cost
        dataList.add(new BarChartDatas("May", "Income", 350));
        dataList.add(new BarChartDatas("May", "Expense", 540));
        dataList.add(new BarChartDatas("May", "Profit", 300));
        dataList.add(new BarChartDatas("May", "Cost", 150));

        // June : Income , Expense , Profit , Cost
        dataList.add(new BarChartDatas("Jun", "Income", 190));
        dataList.add(new BarChartDatas("Jun", "Expense", 280));
        dataList.add(new BarChartDatas("Jun", "Profit", 81));
        dataList.add(new BarChartDatas("Jun", "Cost", 200));

    }

    int income;
    int expense;
    int profit;
    int cost;

    private void initChart() {
        chart.addLegend("Income", new Color(245, 189, 135));
        chart.addLegend("Expense", new Color(135, 189, 245));
        chart.addLegend("Profit", new Color(189, 135, 245));
        chart.addLegend("Cost", new Color(139, 229, 222));

        for (BarChartDatas barChartDatas : dataList) {
            if (barChartDatas.getCategoryField().equals("Income")) {
                income = barChartDatas.getValueField();
            }
            if (barChartDatas.getCategoryField().equals("Expense")) {
                expense = barChartDatas.getValueField();
            }
            if (barChartDatas.getCategoryField().equals("Profit")) {
                profit = barChartDatas.getValueField();
            }
            if (barChartDatas.getCategoryField().equals("Cost")) {
                cost = barChartDatas.getValueField();
                chart.addData(new ModelChart("January", new double[]{income, expense, profit, cost}));
            }
        }
        chart.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chart = new com.raven.chart.Chart();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chart.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Bar Chart Example");

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Chanage Theme");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        LookAndFeel lookAndFeel = UIManager.getLookAndFeel();
        if (lookAndFeel.getClass().getSimpleName().equals("FlatDarkLaf")) {
            FlatLightLaf.setup();
        } else {
            FlatDarkLaf.setup();
        }
        SwingUtilities.updateComponentTreeUI(this);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        chart.clear();
        for (BarChartDatas barChartDatas : dataList) {
            if (barChartDatas.getCategoryField().equals("Income")) {
                income = barChartDatas.getValueField();
            }
            if (barChartDatas.getCategoryField().equals("Expense")) {
                expense = barChartDatas.getValueField();
            }
            if (barChartDatas.getCategoryField().equals("Profit")) {
                profit = barChartDatas.getValueField();
            }
            if (barChartDatas.getCategoryField().equals("Cost")) {
                cost = barChartDatas.getValueField();
                chart.addData(new ModelChart("January", new double[]{income, expense, profit, cost}));
            }
        }
        chart.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Print
        JRDataSource data = new JRBeanCollectionDataSource(dataList);

        HashMap<String, Object> parameters = new HashMap<>();
        parameters.put("Parameter1", data);
        try {
            
            JasperPrint JP = JasperFillManager.fillReport("src/main/TestChartDelTemp.jasper", parameters, new JREmptyDataSource());
            JasperViewer jv = new JasperViewer(JP,false);
            jv.setZoomRatio(.80f);
            jv.setVisible(true);
            
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BarChartExample().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.raven.chart.Chart chart;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
